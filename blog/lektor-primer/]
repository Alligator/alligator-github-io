title: lektor primer
---
body:
I rarely see [Lektor](https://www.getlektor.com/) come in discussions about static site generators (SSGs). I think that's a shame, since Lektor is quite wonderful, so this post will give an overview of how  Lektor works and why I like it.

I'm going to assume you're familiar with what a static site generator does, why you might want to use one, and how they tend to work.

At it's core, Lektor does the same job as other SSGs. That is, it takes files containing content, renders them into a template, and writes the resulting HTML to disk. Where it differs is the flexibility it offers. To demonstrate that I need to talk about three Lektor concepts: **pages**, **models**, and **templates**.

## pages
A page corresponds to a folder in the `content/` directory in a Lektor project. Content goes in here, blog posts, portfolio projects etc. Each page has a `content.lr` file defining it's content. Pages can contain other pages and often pages exist simply to contain other pages (e.g. a blog index page that contains blog posts).

The content is defined as a set of key value pairs, separated by three dashes, like so:

```
_model: blog-post
----
title: my post
----
date: 2020-06-19
----
body:
# it's me blog
```

As you may have guessed, the `_model` field defines the model to be used by this page. Let's examine models in more detail.

## models
A model corresponds to an `ini` file in the `models/` directory. A model defines a set of fields to be used on a page. Here's a model for a blog post:

```ini
[model]
name = Blog Post
hidden = yes 

[fields.title]
label = Title
type = string
size = large

[fields.date]
label = Publication Date
type = date
width = 1/2 

[fields.body]
label = Body
type = markdown
```
blog-post.ini

The filename is used as the id of the model, the `_model` field seen earlier must match this id. These properties mostly do what you'd expect. There are many [field types](https://www.getlektor.com/docs/api/db/types/), [????].

## templates
A template corresponds to an `html` file in the `templates/` directory. These are [Jinja](https://jinja.palletsprojects.com/en/2.11.x/) templates that tell Lektor how to render a model. The name of the template must match the id of the model (so the model and template should have the same filename, excluding the extension). Here's a template for our blog-post model.

```jinja
{% extends "layout.html" %}
{% block title %}{{ this.title }}{% endblock %}
{% block body %}
  <h2>{{ this.title }}</h2>
  {{ this.date|dateformat('medium') }}
  <div class="blog-post">
    {{ this.body }}
  </div>
{% endblock %}
```

---
date: 2020-06-19
