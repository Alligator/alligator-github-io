<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>alligator's blog</title>
  <link rel="alternate" type="text/html" href="https://alligatr.co.uk/blog"/>
  <link rel="self" type="application/atom+xml" href="https://alligatr.co.uk/blog/atom.xml"/>
  
  <updated>2021-08-24T00:00:00Z</updated>
  <id>https://alligatr.co.uk/blog</id>
  <author>
    <name>alligator</name>
  </author>

  
  <entry>
    <title>Render an SVG that uses external fonts to a canvas</title>
    <link href="https://alligatr.co.uk/blog/render-an-svg-using-external-fonts-to-a-canvas/" />
    <id>https://alligatr.co.uk/blog/render-an-svg-using-external-fonts-to-a-canvas/</id>
    <updated>2021-08-24T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>Say, have you ever needed to render an inline SVG that uses an external font to a canvas? Of course you have, and this article will tell you how to do it without the fonts breaking.</p>
<h3 id="tl-dr">tl;dr</h3><p>If you just want to solve the problem:</p>
<ol>
<li>Embed any styles into the SVG directly (no CSS)</li>
<li>Create a data URL for the font file you want to use. See how I did this <a href="render-an-svg-using-external-fonts-to-a-canvas/#creating-a-data-url-for-the-font">here</a></li>
<li>In the stylesheet where the font is declared, replace the font's URL with the data URL.</li>
<li>Embed your stylesheet in the SVG in a <code>&lt;style&gt;</code> tag inside a <code>&lt;defs&gt;</code> tag</li>
<li>Render the SVG to the canvas (see below if you don't know how to do that).</li>
</ol>
<h3 id="the-problem">The problem</h3><p>For my <a href="https://pizza.alligatr.co.uk/100.html">💯 generator</a> I wanted the option to turn the generated SVG into a nice copyable and shareable PNG.</p>
<p>The "standard" way to do this in the browser is the following:</p>
<ol>
<li>Turn the SVG into a data URL</li>
<li>Stuff that data url into an <code>Image</code> object</li>
<li>Create a canvas element and draw the image on it using <code>canvas.drawImage()</code></li>
<li>Turn the canvas into a PNG data URL using <code>canvas.toDataURL('image/png')</code></li>
<li>Stuff that data URL into an <code>&lt;img&gt;</code> element and append it to the page.</li>
</ol>
<p>A simple, not convoluted at all, 5 step process.</p>
<p>Here is what the image should have been:</p>
<p><img src="render-an-svg-using-external-fonts-to-a-canvas/normal.png" alt="&#34;normal&#34; in a cursive font with two underlines"></p>
<p>and instead this was the result:</p>
<p><img src="render-an-svg-using-external-fonts-to-a-canvas/norm.png" alt="&#34;norm&#34; in a serif font with two underlines"></p>
<p>Hmm. This is anything but the norm.</p>
<p>The issue here is that external styles aren't applied to SVGs in an img tag. The font is loaded from Google fonts via a stylesheet. For that to work, if the SVG is in an img tag, the <em>stylesheet itself</em> needs to be embedded inside the SVG.</p>
<p>There's more than that however, an SVG in an img tag has to be <em>standalone</em>, it can't request external resources, including that font. The <em>font itself</em> also needs to be embedded inside the stylesheet. To do that we first need to turn the font file into a data URL.</p>
<h3 id="creating-a-data-url-for-the-font">Creating a data URL for the font</h3><p>I used this script in the Firefox console to do this:</p>
<div class="hll"><pre><span></span><span class="nx">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;https://fonts.gstatic.com/s/ranga/v8/C8cg4cYisGb28qY-AygW43w.woff2&#39;</span><span class="p">);</span>
<span class="nx">blob</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">blob</span><span class="p">();</span>
<span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
<span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">result</span><span class="p">));</span>
<span class="nx">f</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</pre></div>
<p>Replace the URL in <code>fetch()</code> with the URL to your font.</p>
<h3 id="embedding-the-font-in-the-stylesheet">Embedding the font in the stylesheet</h3><p>This is easy, replace the URL in the <code>url()</code> call:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">@</span><span class="k">font-face</span> <span class="p">{</span>
    <span class="nt">font-family</span><span class="o">:</span> <span class="s1">&#39;Ranga&#39;</span><span class="o">;</span>
    <span class="c">/* .. */</span>
    <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="nt">data</span><span class="p">:</span><span class="nd">font</span><span class="o">/</span><span class="nt">woff2</span><span class="o">;</span><span class="nt">base64</span><span class="o">,....)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;woff2&#39;</span><span class="o">);</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</pre></div>
<h3 id="embedding-the-stylesheet-in-the-svg">Embedding the stylesheet in the SVG</h3><p>This is easy too, add it to SVG inside a <code>&lt;defs&gt;</code> tag:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">svg</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&quot;http://www.w3.org/2000/svg&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">defs</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
      <span class="p">@</span><span class="k">font-face</span> <span class="p">{</span> <span class="c">/* ... */</span> <span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">defs</span><span class="p">&gt;</span>
  rest of SVG here...
<span class="p">&lt;/</span><span class="nt">svg</span><span class="p">&gt;</span>
</pre></div>
<h3 id="and-the-rest">And the rest</h3><p>Now we're clear to do the rest of steps above:</p>
<div class="hll"><pre><span></span><span class="c1">// convert the SVG to a data URL</span>
<span class="kd">const</span> <span class="nx">svgText</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLSerializer</span><span class="p">().</span><span class="nx">serializeToString</span><span class="p">(</span><span class="nx">svgElement</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">dataUrl</span> <span class="o">=</span> <span class="sb">`data:image/svg+xml;charset=utf-8,</span><span class="si">${</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">svgText</span><span class="p">)</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>

<span class="c1">// create an image for that data URL</span>
<span class="kd">const</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="p">();</span>
<span class="nx">img</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">dataUrl</span><span class="p">;</span>

<span class="nx">img</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// create a canvas</span>
  <span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>
  <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">().</span><span class="nx">width</span><span class="p">;</span>
  <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">().</span><span class="nx">height</span><span class="p">;</span>

  <span class="c1">// draw the image on to the canvas</span>
  <span class="kd">const</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">);</span>

  <span class="c1">// do something with the canvas</span>
  <span class="c1">// e.g. turn it into a PNG and add it to the document:</span>
  <span class="kd">const</span> <span class="nx">pngUrl</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s1">&#39;image/png&#39;</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">imgElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">);</span>
  <span class="nx">imgElement</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">pngUrl</span><span class="p">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">imgElement</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
<p>Enjoy. I hope that saved you a wasted evening's hacking.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>Cron job notifications in Discord</title>
    <link href="https://alligatr.co.uk/blog/cron-notifications/" />
    <id>https://alligatr.co.uk/blog/cron-notifications/</id>
    <updated>2021-08-10T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>Cron's built-in way of sending you a mail if a job printed something (and likely failed) has never been very useful to me. I barely use email and I don't want to set up my server to send it. Instead, I turn these mails into Discord notifications.</p>
<p>Python's "everything including the kitchen sink" standard library includes an <a href="https://docs.python.org/3/library/mailbox.html">mbox parser</a>, the format used by user mail files, which makes this an easy task.</p>
<p>I read the mails in my mail file, build up a message of any found, and send them along to Discord. All my cron jobs print only when they fail, and I don't get mail from anything else on my server, so I can safely assume all mails are cron job failures.</p>
<p>Here's the script:</p>
<div class="hll"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">mailbox</span>
<span class="kn">import</span> <span class="nn">requests</span>

<span class="n">WEBHOOK_URL</span> <span class="o">=</span> <span class="s1">&#39;URL_HERE&#39;</span>

<span class="c1"># collect any mails into a message</span>
<span class="n">discord_message</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
<span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">mailbox</span><span class="o">.</span><span class="n">mbox</span><span class="p">(</span><span class="s1">&#39;/var/mail/USERNAME_HERE&#39;</span><span class="p">):</span>
    <span class="n">subject</span> <span class="o">=</span> <span class="n">message</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get_payload</span><span class="p">()</span>
    <span class="n">discord_message</span> <span class="o">+=</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">subject</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">body</span><span class="si">}</span><span class="se">\n</span><span class="s1">&#39;</span>

<span class="c1"># send it to discord</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">discord_message</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;&lt;@USER_ID_HERE&gt; cron job(s) failed: ```</span><span class="si">{</span><span class="n">discord_message</span><span class="si">}</span><span class="s1">```&#39;</span>
    <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">WEBHOOK_URL</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span> <span class="s1">&#39;content&#39;</span><span class="p">:</span> <span class="n">content</span> <span class="p">})</span>
    <span class="c1"># clear out the mailbox</span>
    <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/var/mail/alligator&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>The result looks like this:</p>
<p><img src="cron-notifications/cron-notifier.png" alt="The received discord message from the script"></p>
<p>I set up cron to run this script every few minutes (yes I do see the potential for catastrophe there) and now I get mobile and desktop notifications when a cron job fails. A personal Discord server, a webhook, and a Python script, go a long way towards a poor man's alerting and logging system.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>Suspicious optional chaining</title>
    <link href="https://alligatr.co.uk/blog/suspicious-optional-chaining/" />
    <id>https://alligatr.co.uk/blog/suspicious-optional-chaining/</id>
    <updated>2021-08-09T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>I'm seeing a worrying pattern in TypeScript code in my day job: suspicious optional chaining. Consider this code that returns a user's name:</p>
<div class="hll"><pre><span></span><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">userId</span>: <span class="kt">number</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">fetchUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">response</span><span class="o">?</span><span class="p">.</span><span class="nx">user</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span> <span class="o">??</span> <span class="s1">&#39;Anonymous&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>This code seems very suspicious of it's data. Is the result from <code>fetchUser</code> really that untrustworthy, or did the developer use optional chaining every time <em>just in case</em>? We have no way of knowing without more information.</p>
<p>Also, every optional chaining operator adds an implicit conditional, and this code has one answer to every else branch: return <code>'Anonymous'</code>. Is that always the correct behaviour? What if <code>response</code> is null, what if <code>user</code> is null? Again we have no way of knowing for sure.</p>
<p>This suspicious code has become… suspicious.</p>
<p>Let's rewrite this without optional chaining, starting with the first optional chaining operator.</p>
<div class="hll"><pre><span></span><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">userId</span>: <span class="kt">number</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">fetchUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">user</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span> <span class="o">??</span> <span class="s1">&#39;Anonymous&#39;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>What should we do if that condition isn't true? Is <code>response</code> ever falsy? We need to look at <code>fetchUser</code> to know. Let's say we do and it always returns a response, but if the user wasn't found the <code>user</code> property is null. We can adjust our condition to check for this.</p>
<p>What about <code>name</code>? Do users always have a name? Let's say we check the API documentation and users can be anonymous, in which case their name is null. This confirms that <code>name</code> is always present but, if it's null, returning <code>'Anonymous'</code> is the correct behaviour.</p>
<p>Armed with this information we can write this:</p>
<div class="hll"><pre><span></span><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">userId</span>: <span class="kt">number</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">fetchUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">??</span> <span class="s1">&#39;Anonymous&#39;</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;User not found&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>This code is more in control of it's data. It knows which conditions need to be checked. We didn't set out to write code that does this, but were led to do so by removing the conditional chaining operators.</p>
<p>Defaulting to conditional chaining “just in case” makes the code worse, both when it's written and later when it's read. For dynamic or user supplied data it can be useful, but with a well defined data model, it obscures details and puts a burden on the next developer to re-discover those details. Be kind to the next person who has to read your code, and optionally chain responsibly.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>Fast content aware resizing in JavaScript</title>
    <link href="https://alligatr.co.uk/blog/fast-content-aware-resizing-in-javascript/" />
    <id>https://alligatr.co.uk/blog/fast-content-aware-resizing-in-javascript/</id>
    <updated>2021-04-13T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <style>
td { text-align: right; }
</style><p>Seam carving is a content-aware image resizing algorithm, and I've been working on a <a href="https://github.com/Alligator/seam-carving/tree/main">JavaScript implementation of it</a>. It's as fast an I can make it while still using a naïve algorithm. Well as fast as I can make it for now anyway.</p>
<p>Here's some sample output, the original is on the left, the resized version is on the right:</p>
<p><img src="fast-content-aware-resizing-in-javascript/seam-carving-example.jpg" alt=""></p>
<p>This article is about optimising the code, so I won't go into how seam carving works. If you want to read about it <a href="https://en.wikipedia.org/wiki/Seam_carving">the wikipedia page</a> does a good enough job.</p>
<h2 id="seam-carving-js">seam-carving-js</h2><p>I didn't set out to write a seam carving library, I only wanted to use one. I run a discord bot that (among other things) lets users manipulate images, and I wanted a content-aware resize command. It's written in JavaScript and uses node-canvas to manipulate images, so I found <a href="https://github.com/mfbx9da4/seam-carving-js">seam-carving-js</a>, which is also written in JavaScript and works with canvases.</p>
<p>It does the job, but it's slow and memory hungry. My bot runs on a VPS with a gig of memory, and eating up half a gig to process one image causes a lot of thrashing. I attempted <a href="https://github.com/Alligator/seam-carving-js/commit/05c4c87befa57dfe5a87de008ccc1fff39468118">a hack</a> to help the memory usage, but it didn't do much.</p>
<p>Here's some benchmarks to show how slow it is, I reduced the width of two images by half:</p>
<table>
<thead><tr>
<th>image</th>
<th>size</th>
<th>time</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>800x524</td>
<td>38732 ms</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>1428x968</td>
<td>171990 ms</td>
</tr>
</tbody>
</table>
<p>Almost <strong>three minutes</strong> for castle.jpg. I know my Intel i5 4670K is getting on a bit but surely we can do better.</p>
<h2 id="first-implementation">First implementation</h2><p>The <a href="https://github.com/Alligator/seam-carving/blob/27d8e2cc91f586a63a4fbdb489a6977351fcd6f1/index.ts">first pass</a> was a straightforward implementation of the algorithm. I used typed arrays everywhere and created them with the correct size before the main loop to avoid allocating memory. This worked quite well, here are the benchmarks:</p>
<table>
<thead><tr>
<th>image</th>
<th>time</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>2491 ms</td>
<td>15.6x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>14630 ms</td>
<td>11.8x</td>
</tr>
</tbody>
</table>
<p>Memory usage was also low enough to be not noticeable. This was pretty good, but I still thought 15 seconds was too long for castle.jpg.</p>
<h2 id="mutation-is-sometimes-good">Mutation is (sometimes) good</h2><p>Despite trying to avoid allocation, one instance slipped through the net. I fixed that by <a href="https://github.com/Alligator/seam-carving/commit/a42c31c59a5fd910884b12778579100018d5c1e9">re-using an array</a> instead of allocating a new one, which offered a small performance benefit:</p>
<table>
<thead><tr>
<th>image</th>
<th>time</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>2323 ms</td>
<td>1.07x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>14027 ms</td>
<td>1.04x</td>
</tr>
</tbody>
</table>
<h2 id="many-small-functions">Many small functions</h2><p>I then <a href="https://github.com/Alligator/seam-carving/commit/51201de5263c9a7fe10b3456280fdc1ebf96714a">split the main loop</a> into a set of small functions. This was mainly to help with debugging and profiling, but it did give a tiny performance increase:</p>
<table>
<thead><tr>
<th>image</th>
<th>time</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>2258 ms</td>
<td>1.02x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>13852 ms</td>
<td>1.01x</td>
</tr>
</tbody>
</table>
<p>I think this might be TurboFan optimising the small functions sooner than it would optimise the big main function. Or perhaps it can be more selective with what it optimises, rather than doing the whole thing.</p>
<h2 id="array.copyWithin">Array.copyWithin</h2><p>Once the algorithm has decided which seam to get rid of, those pixels need to be removed, one per row in the image. I do this in place in the array of pixels and every time one is removed the rest of the array needs to shuffle along to close the gap. I originally did this using a loop that copies each pixel to it's new location, skipping removed ones.</p>
<p>After running out of ideas and staring at the TypedArray docs on MDN, I found <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">Array.copyWithin</a>. It's like <code>memmove()</code> and lets you shift data around in an array. Using that, I avoid looping over every pixel and instead only loop over every row, copying the left half of the row, skipping the removed pixel, then copying the right half.</p>
<p>I <a href="https://github.com/Alligator/seam-carving/commit/435e8f87ef825ca0b3365eecb715af97997fbc29">changed</a> two <a href="https://github.com/Alligator/seam-carving/commit/02001c02dcf7012938f888d235cc84db63d8b1f1">loops</a> to use copyWithin. It made quite a difference:</p>
<table>
<thead><tr>
<th>image</th>
<th>time</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>890 ms</td>
<td>2.53x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>6029 ms</td>
<td>2.30x</td>
</tr>
</tbody>
</table>
<p>Finally under a second for something. An arbitrary goal, but being able to say "...in under a second" feels good. The version of dog.jpg from the commit messages was larger, which is why the time here is different.</p>
<h2 id="going-branchless">Going branchless</h2><p>The Chrome devtools line-level profiling showed that some lines using <code>Math.min</code> and <code>Math.max</code> used up a lot of time. These lines are in the middle of the hottest loop in the library, and my assumption was they cause lots of branches (and branch misses). I know that min and max of two numbers can be compiled to one instruction with no branches, but I don't know if v8 can do that.</p>
<p>I decided to <a href="https://github.com/Alligator/seam-carving/commit/e8f077201fb7d166955ac55b4da96f77bbb70c40">make the branchless versions myself</a> instead.</p>
<p>This is how they work, given x and y:</p>
<ol>
<li>Calculate <code>x - y</code></li>
<li>Right shift that <code>(1 - size of the number)</code> times. 31 in this case.<ul>
<li>If x &gt; y, the result will be 0</li>
<li>if x &lt; y, the result will be have all it's bits set to 1</li>
<li>This works by shifting out everything but the sign bit, and the sign bit is preserved when right shifting a negative number</li>
</ul>
</li>
<li>Bitwise AND that with x - y<ul>
<li>If x &gt; y, the result is <code>(x - y) &amp; 0</code>, or 0</li>
<li>If x &lt; y, the result is <code>(x - y) & (2<sup>32</sup> - 1)</code>, or <code>x - y</code></li>
</ul>
</li>
<li>To find the minimum, add y<ul>
<li>If x &gt; y, the result is <code>y + 0</code>, or y</li>
<li>If x &lt; y, the result is <code>y + (x - y)</code>, or x</li>
</ul>
</li>
<li>To find the maximum, subtract x<ul>
<li>If x &gt; y, the result is <code>x - 0</code>, or x</li>
<li>If x &lt; y, the result is <code>x - (x - y)</code>, or y</li>
</ul>
</li>
</ol>
<p>These only work on 32 bit integers. I'm using <code>Uint32Array</code> everywhere, so I don't have to worry about other types sneaking in.</p>
<p>Here's the benchmark afterwards:</p>
<table>
<thead><tr>
<th>image</th>
<th>time</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>618 ms</td>
<td>1.44x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>3816 ms</td>
<td>1.58x</td>
</tr>
</tbody>
</table>
<p>It worked quite well.</p>
<h2 id="end">End</h2><p>That's where it stands right now. I've made this look like a smooth process, but rest assured most of my ideas made it slower rather than faster, and had to be abandoned.</p>
<p>Here's a comparison between the original library that started this and mine:</p>
<table>
<thead><tr>
<th>image</th>
<th>original</th>
<th>mine</th>
<th>speed increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>dog.jpg</td>
<td>38732 ms</td>
<td>618 ms</td>
<td>62.67x</td>
</tr>
<tr>
<td>castle.jpg</td>
<td>171990 ms</td>
<td>3816 ms</td>
<td>45.07x</td>
</tr>
</tbody>
</table>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>Obsidian and approaching notes like code</title>
    <link href="https://alligatr.co.uk/blog/obsidian-and-approaching-notes-like-code/" />
    <id>https://alligatr.co.uk/blog/obsidian-and-approaching-notes-like-code/</id>
    <updated>2021-04-02T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>Over time source code grows larger than can be held in one person's head. When that happens, we rely less on hierarchies like files and folders and instead navigate via connections between files. We use tools provided by the editor or IDE<sup class="footnote-ref" id="fnref-ed"><a href="#fn-ed">1</a></sup> to jump from callers to callees, variables to types, declarations to references, and so on.</p>
<p>I use <a href="https://obsidian.md/">Obsidian</a> for note-taking and it dawned on me that this connection based navigation is also it's approach to notes. It's like an IDE for notes.</p>
<h2 id="navigating-via-connections">Navigating via connections</h2><p>Obsidian, like code editors and IDEs, has tools to jump around via explicit and implicit connections. In editors we have <strong>go to definition</strong>, <strong>go to type definition</strong> and <strong>find references</strong> among others. In Obsidian we have <strong>links</strong>, <strong>linked mentions</strong> and <strong>unlinked mentions</strong>.</p>
<p>Links are direct connections from the current note to others. Following a link is like using go to definition.</p>
<p>Linked mentions are direct connections from other notes to the current one, they are the inverse of links. Following a linked mentioned is like using find references.</p>
<p>Unlinked mentions are instances of other notes mentioning the name of the current note, without using a link. They don't have a direct analogue to a code editor feature, but are a variation of find references.</p>
<p>These tools find connections we didn't know were there. In code it might be from display logic to business logic to the database. In Obsidian it might be from a newly created note to existing notes via unlinked mentions. The connections aren't obvious from the hierarchy of files and folders, they emerge as we navigate around.</p>
<h2 id="user-interface">User Interface</h2><p>In a recent episode of <a href="https://www.relay.fm/cortex/">Cortex</a> one of the hosts, Myke, said Obsidian's UI looks like nothing he's ever seen. This surprised me, as it looks a lot like the current crop of GUI based code editors (VS Code, Sublime, Atom). If you're not a programmer that style of UI would be alien to you.</p>
<p>Obsidian borrows common features from these editors and puts them in a different context. Fuzzy file name matching, a command palette, fast and expression global search, a plugin ecosystem, tabbed and split windows to name a few.</p>
<p>A plethora of useful features are confined to code editors, I wonder what other good ideas are waiting to be applied to note-taking. Static analysis to find deep connections? Navigation with fuzzy matching to specific types of content like headings, paragraphs and quotes? LSP support for English? ...Maybe skip that last one.</p>
<div class="footnotes">
<hr>
<ol><li id="fn-ed"><p>Even if you use an editor without these features, you probably still use these concepts and do the navigation manually.<a href="#fnref-ed" class="footnote">&#8617;</a></p></li>
</ol>
</div>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>narrowing discriminated unions in typescript</title>
    <link href="https://alligatr.co.uk/blog/narrowing-discriminated-unions-in-typescript/" />
    <id>https://alligatr.co.uk/blog/narrowing-discriminated-unions-in-typescript/</id>
    <updated>2021-03-13T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <style>
mark {
  background-color: rgba(255, 255, 255, 0.2);
  color: white;
}
</style><p>Here is a solution to a problem I've had a few times in TypeScript. I have a discriminated union:</p>
<div class="hll"><pre><span></span><span class="kd">enum</span> <span class="nx">ObjKind</span> <span class="p">{</span>
  <span class="nb">String</span><span class="p">,</span>
  <span class="nb">Number</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ObjString</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">kind</span>: <span class="kt">ObjKind.String</span><span class="p">;</span>
  <span class="nx">str</span>: <span class="kt">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ObjNumber</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">kind</span>: <span class="kt">ObjKind.Number</span><span class="p">;</span>
  <span class="nx">num</span>: <span class="kt">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Obj</span> <span class="o">=</span> <span class="nx">ObjString</span> <span class="o">|</span> <span class="nx">ObjNumber</span><span class="p">;</span>
</pre></div>
<p>and I want a function <code>checkObj</code> that, if called like this:</p>
<div class="hll"><pre><span></span><span class="kd">const</span> <span class="nx">someObj1</span>: <span class="kt">Obj</span> <span class="o">=</span> <span class="p">...;</span>
<span class="kd">const</span> <span class="nx">someObj2</span>: <span class="kt">Obj</span> <span class="o">=</span> <span class="p">...;</span>
<span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">checkObj</span><span class="p">(</span><span class="nx">someObj1</span><span class="p">,</span> <span class="nx">ObjKind</span><span class="p">.</span><span class="nb">String</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">checkObj</span><span class="p">(</span><span class="nx">someObj2</span><span class="p">,</span> <span class="nx">ObjKind</span><span class="p">.</span><span class="nb">Number</span><span class="p">);</span>
</pre></div>
<p>returns the correct type from the union. That is, I want <code>str</code> to be an <code>ObjString</code> and <code>num</code> to be an <code>ObjNumber</code>.</p>
<h2 id="the-first-attempt">the first attempt</h2><p>This version of <code>checkObj</code> does <strong>not</strong> do this, but we'll build on it:</p>
<div class="hll"><pre><span></span><span class="kd">function</span> <span class="nx">checkObj</span><span class="p">(</span><span class="nx">obj</span>: <span class="kt">Obj</span><span class="p">,</span> <span class="nx">kind</span>: <span class="kt">ObjKind</span><span class="p">)</span><span class="o">:</span> <span class="nx">Obj</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">kind</span> <span class="o">!==</span> <span class="nx">kind</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;type mismatch!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>This checks the type, but returns an <code>Obj</code>. To get the correct type, the caller needs to add a type assertion:</p>
<div class="hll"><pre><span></span><span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">checkObj</span><span class="p">(</span><span class="nx">someObj</span><span class="p">,</span> <span class="nx">ObjKind</span><span class="p">.</span><span class="nb">String</span><span class="p">)</span> <span class="kr">as</span> <span class="nx">ObjString</span><span class="p">;</span>
</pre></div>
<p>That relies on manually matching the <code>ObjKind</code> to the assertion, how do we get the type checker to do this for us?</p>
<h2 id="the-solution">the solution</h2><p>To do this, we need to change the signature of the function. First we move <code>ObjKind</code> into a type parameter:</p>
<pre>
function checkObj<mark>&lt;K extends ObjKind&gt;</mark>(
  obj: Obj,
  <mark>kind: K</mark>,
)
</pre><p>This allows us to use it in the return type, which becomes this:</p>
<pre>
function checkObj&lt;K extends ObjKind&gt;(
  obj: Obj,
  kind: K,
): <mark>Extract&lt;Obj, { kind: K }&gt;</mark> {
</pre><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#extracttype-union">Extract</a> is a utility type that will get a type from a union that can be assigned to another type. We give it <code>Obj</code>, the union we want to extract a type from, and <code>{ kind: K }</code>, the type we want to extract. This will give us any type in the union where the kind parameter is set to K.</p>
<p>All that's left to do is add a type assertion on the return value and we're done:</p>
<pre>
return obj <mark>as Extract&lt;Obj, { kind: K }&gt;</mark>;
</pre><p>Here's the finished function:</p>
<div class="hll"><pre><span></span><span class="kd">function</span> <span class="nx">checkObj</span><span class="o">&lt;</span><span class="nx">K</span> <span class="k">extends</span> <span class="nx">ObjKind</span><span class="o">&gt;</span><span class="p">(</span>
  <span class="nx">obj</span>: <span class="kt">Obj</span><span class="p">,</span>
  <span class="nx">kind</span>: <span class="kt">K</span><span class="p">,</span>
<span class="p">)</span><span class="o">:</span> <span class="nx">Extract</span><span class="o">&lt;</span><span class="nx">Obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">kind</span>: <span class="kt">K</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">kind</span> <span class="o">!==</span> <span class="nx">kind</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;type mismatch!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">obj</span> <span class="kr">as</span> <span class="nx">Extract</span><span class="o">&lt;</span><span class="nx">Obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">kind</span>: <span class="kt">K</span> <span class="p">}</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Hope that helps someone. Usually when I see types like this in TypeScript my eyes glaze over, but it was worth persisting a little to make more use of the type checker.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>termbox-janet</title>
    <link href="https://alligatr.co.uk/blog/termbox-janet/" />
    <id>https://alligatr.co.uk/blog/termbox-janet/</id>
    <updated>2021-02-20T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>I've written some termbox bindings for Janet. If you don't know what either of those are, <a href="https://github.com/termbox/termbox">termbox</a> is a small library for building text-based user interfaces, and <a href="https://janet-lang.org">Janet</a> is a pragmatic lisp-like programming language with good native C code interoperability.</p>
<p>You can find them at <a href="https://github.com/alligator/termbox-janet">termbox-janet</a>.</p>
<p>They are essentially complete, bar a couple of functions I haven't found much use for.</p>
<p>Here's a minimal example:</p>
<div class="hll"><pre><span></span><span class="p">(</span><span class="kn">import</span> <span class="nn">termbox</span> <span class="p">:</span><span class="k">as</span> <span class="n">tb</span><span class="p">)</span>

<span class="p">(</span><span class="n">tb</span><span class="o">/</span><span class="n">init</span><span class="p">)</span>

<span class="p">(</span><span class="n">tb</span><span class="o">/</span><span class="n">put</span><span class="o">-</span><span class="n">string</span> <span class="mi">1</span> <span class="mi">1</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">)</span>
<span class="p">(</span><span class="n">tb</span><span class="o">/</span><span class="n">present</span><span class="p">)</span>

<span class="c1"># block until an event happens</span>
<span class="p">(</span><span class="n">tb</span><span class="o">/</span><span class="n">poll</span><span class="o">-</span><span class="n">event</span><span class="p">)</span>

<span class="p">(</span><span class="n">tb</span><span class="o">/</span><span class="n">shutdown</span><span class="p">)</span>
</pre></div>
<p>More examples are in the test directory of the repo <a href="https://github.com/Alligator/termbox-janet/tree/main/test">here</a>.</p>
<p>Writing bindings for Janet is a delight. The documentation could do with some work, but plenty of native modules are on GitHub to look through. The API provides lots of useful functions and I can usually express what I want in at most a couple of calls.</p>
<p>Some useful examples:</p>
<p><a href="https://github.com/janet-lang/sqlite3">sqlite3</a>
<br />
<a href="https://github.com/janet-lang/circlet">circlet</a> - example of a Janet module embedded in a native one.
<br />
<a href="https://github.com/andrewchambers/janet-uri">janet-uri</a> - example of a native module re-exported from a Janet one.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>k, z but smaller</title>
    <link href="https://alligatr.co.uk/blog/k-z-but-smaller/" />
    <id>https://alligatr.co.uk/blog/k-z-but-smaller/</id>
    <updated>2020-06-24T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>You may have heard of <a href="https://github.com/rupa/z">z</a> or <a href="https://github.com/ajeetdsouza/zoxide">zoxide</a>. These tools keep track of frequently visited directories and provide a command to jump to them. For example, if you are often in <code>/var/www</code> then executing <code>z www</code> will take you there from any directory.</p>
<p>I present a tiny shell script alternative to these, <code>k</code>:</p>
<div class="hll"><pre><span></span>k<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> -z <span class="nv">$1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="nv">$PWD</span> &gt;&gt; ~/.k
    <span class="k">else</span>
        <span class="nv">K</span><span class="o">=</span>~/.k
        <span class="k">case</span> <span class="nv">$1</span> <span class="k">in</span>
        clean<span class="o">)</span>  sort <span class="nv">$K</span> <span class="p">|</span> uniq &gt; <span class="si">${</span><span class="nv">K</span><span class="si">}</span>.tmp <span class="o">&amp;&amp;</span> mv <span class="si">${</span><span class="nv">K</span><span class="si">}</span>.tmp <span class="si">${</span><span class="nv">K</span><span class="si">}</span><span class="p">;;</span>
        rm<span class="o">)</span> sed -i -E <span class="s2">&quot;\#^</span><span class="si">${</span><span class="nv">PWD</span><span class="si">}</span><span class="s2">\$#d&quot;</span> <span class="si">${</span><span class="nv">K</span><span class="si">}</span><span class="p">;;</span>
        ls<span class="o">)</span> cat <span class="si">${</span><span class="nv">K</span><span class="si">}</span><span class="p">;;</span>
        *<span class="o">)</span>  <span class="nb">cd</span> <span class="s2">&quot;</span><span class="k">$(</span>grep -e <span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span> <span class="si">${</span><span class="nv">K</span><span class="si">}</span> <span class="p">|</span> head -n <span class="m">1</span><span class="k">)</span><span class="s2">&quot;</span><span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">fi</span>
<span class="o">}</span>
</pre></div>
<p>I've also created fish and (somewhat limited) batch script versions, available in <a href="https://gist.github.com/Alligator/11e5bb01c12c8ac8b74824d54d1ee560">this gist</a> along with the original.</p>
<p>I can take no credit for this, I discovered it in <a href="https://lobste.rs/s/gsivtu/zoxide_new_cd_command_written_rust_learns#c_p6woex">this lobste.rs comment</a> and have had it in my bashrc ever since. Sometimes all you really need is thirteen lines of bash.</p>
<p>It is used like so:</p>
<pre><code>go to some directory
  $ cd /var/www

add it to the list
  $ k

go somewhere else
  $ cd /

go back to the saved directory
  $ k www
  $ pwd
  /var/www

show the saved directories
  $ k ls
  /var/www

remove a saved directory
  $ k rm /var/www
</code></pre>
<p>Saved directories are stored in <code>~/.k</code>. This list must be built manually by running the <code>k</code> command in directories you want to save, but I didn't find this difficult. There's only a handful of directories I need quick access to.</p>
<p>Finally, a comparison of the lines of code in k, z and zoxide (as reported by cloc):</p>
<table>
<thead><tr>
<th>tool</th>
<th>loc</th>
</tr>
</thead>
<tbody>
<tr>
<td>k</td>
<td>13 (shell)</td>
</tr>
<tr>
<td>z</td>
<td>191 (shell)</td>
</tr>
<tr>
<td>zoxide</td>
<td>1093 (rust), 110 (shell)</td>
</tr>
</tbody>
</table>
<p>This isn't to disparage z and zoxide (especially z, it's quite marvellous for a few hundred lines of shell script), just a lighthearted reminder that <a href="https://www.jwz.org/doc/worse-is-better.html">worse can often be better</a>.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>beyond the code element</title>
    <link href="https://alligatr.co.uk/blog/beyond-the-code-element/" />
    <id>https://alligatr.co.uk/blog/beyond-the-code-element/</id>
    <updated>2020-06-06T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>While reading <a href="https://devblogs.microsoft.com/oldnewthing/">the old new thing</a> I noticed that keyboard shortcuts in articles are shown using the <code>&lt;kbd&gt;</code> element, like so:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>Alt<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span> + <span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>f4<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span>
</pre></div>
<p>This element was new to me, so I looked at <a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html">the spec</a> and found there's a handful of useful elements for various computer-y things that, besides the <code>code</code> element, I'd never noticed before. Namely <code>kbd</code>, <code>var</code> and <code>samp</code>.</p>
<p>At the time of writing, this blog doesn't have custom CSS for these elements beyond setting the font, so you will see them however your browser decides to render them.</p>
<h2 id="kbd">kbd</h2><p><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-var-element">Spec</a></p>
<p><code>kbd</code> represents user input. This is typically keyboard input, but could be other sorts of input, such as voice.</p>
<p>Here's some example markup:</p>
<div class="hll"><pre><span></span>Press <span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>Alt<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span> + <span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>F4<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span> to exit.
</pre></div>
<p>And the rendered result:</p>
<p>Press <kbd>Alt</kbd> + <kbd>F4</kbd> to exit.</p>
<h2 id="var">var</h2><p><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-var-element">Spec</a></p>
<p><code>var</code> represents a variable. The spec has a fairly broad definition of this:</p>
<blockquote><p>This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.</p>
</blockquote>
<p>Example markup:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">var</span><span class="p">&gt;</span>foo<span class="p">&lt;/</span><span class="nt">var</span><span class="p">&gt;</span> + <span class="p">&lt;</span><span class="nt">var</span><span class="p">&gt;</span>bar<span class="p">&lt;/</span><span class="nt">var</span><span class="p">&gt;</span> = <span class="p">&lt;</span><span class="nt">var</span><span class="p">&gt;</span>baz<span class="p">&lt;/</span><span class="nt">var</span><span class="p">&gt;</span>
</pre></div>
<p>Result:</p>
<p><var>foo</var> + <var>bar</var> = <var>baz</var></p>
<h2 id="samp">samp</h2><p><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-samp-element">Spec</a></p>
<p><code>samp</code> represents output from a program or system.</p>
<p>Example markup</p>
<div class="hll"><pre><span></span>The system will print <span class="p">&lt;</span><span class="nt">samp</span><span class="p">&gt;</span>Bad command or file name<span class="p">&lt;/</span><span class="nt">samp</span><span class="p">&gt;</span>.
</pre></div>
<p>Result:</p>
<p>The system will print <samp>Bad command or file name</samp>.</p>
<h2 id="combinations">combinations</h2><p>These elements can be combined in interesting ways, for example <code>code</code> and <code>samp</code> elements can used to show input and output:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">code</span><span class="p">&gt;</span>console.log(&#39;hello&#39;);<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">samp</span><span class="p">&gt;</span>hello<span class="p">&lt;/</span><span class="nt">samp</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</pre></div>
<p>By default the <code>code</code> and <code>samp</code> elements use a monospace font, so without extra styling this will look like a standard pre block:</p>
<pre>
<code>console.log('hello');</code>
<samp>hello</samp>
</pre><p>Of course you can go nuts styling those elements if you so wish:</p>
<style>
.styled-pre code {
  color: lightpink;
}
.styled-pre code:before {
  content: ' INPUT: '
}

.styled-pre samp {
  color: lightgreen;
}
.styled-pre samp:before {
  content: 'OUTPUT: '
}
</style><pre class="styled-pre">
<code>console.log('hello');</code>
<samp>hello</samp>
</pre><p>If the <code>kbd</code> element is nested inside of a <code>samp</code> element, it represents user input being echoed back by the system, as would happen at a command interpreter:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;&lt;</span><span class="nt">samp</span><span class="p">&gt;</span><span class="ni">&amp;gt;</span> <span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>wait<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span>
time passes...
<span class="p">&lt;/</span><span class="nt">samp</span><span class="p">&gt;&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</pre></div>
<pre><samp>&gt; <kbd>wait</kbd>
time passes...
</samp></pre><p>A <code>samp</code> nested inside a <code>kbd</code> element represents input based on system output, for example selecting a menu item being displayed by the system. This ends up being quite verbose, especially if there are multiple steps involved:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;&lt;</span><span class="nt">samp</span><span class="p">&gt;</span>File<span class="p">&lt;/</span><span class="nt">samp</span><span class="p">&gt;&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span> <span class="ni">&amp;gt;</span> <span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;&lt;</span><span class="nt">samp</span><span class="p">&gt;</span>Open<span class="p">&lt;/</span><span class="nt">samp</span><span class="p">&gt;&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span>
</pre></div>
<p>So the spec recommends just using <code>kbd</code> instead:</p>
<div class="hll"><pre><span></span><span class="p">&lt;</span><span class="nt">kbd</span><span class="p">&gt;</span>File <span class="ni">&amp;gt;</span> Open<span class="p">&lt;/</span><span class="nt">kbd</span><span class="p">&gt;</span>
</pre></div>
<p>They both render similarly, although the <code>&gt;</code> in the first example isn't in a monospace font, so it looks a little odd:</p>
<p><kbd><samp>File</samp></kbd> &gt; <kbd><samp>Open</samp></kbd></p>
<p>and just the <code>kbd</code> tag:</p>
<p><kbd>File &gt; Open</kbd></p>
<p>I always enjoy finding standard HTML elements to replace what would have previously been a div with a class.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>vim tips from well wasted workdays</title>
    <link href="https://alligatr.co.uk/blog/neovim-tips-from-well-wasted-workdays/" />
    <id>https://alligatr.co.uk/blog/neovim-tips-from-well-wasted-workdays/</id>
    <updated>2020-04-25T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>Below is a selection of useful bits and pieces taken from my vimrc. I intend for this to be a living document and will add new things as and when I find them.</p>
<h2 id="productivity">productivity</h2><p>Perform common tasks in less time.</p>
<h3 id="use-space-as-your-leader">use space as your leader</h3><p>This lets you hit the leader with both of your thumbs.</p>
<div class="hll"><pre><span></span><span class="k">let</span> mapleader <span class="p">=</span> <span class="s2">&quot; &quot;</span>
</pre></div>
<p>I believe I learned about this from <a href="https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/">this article</a>
which has some other good tips, namely mapping common command mode commands to leader based key
combinations:</p>
<div class="hll"><pre><span></span><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> :<span class="k">w</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">f</span> :NERDTreeToggle<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</pre></div>
<h3 id="create-ad-hoc-build/run-mappings">create ad-hoc build/run mappings</h3><p>Often all I need as a build tool is an ad-hoc binding to run a shell command. I
use <kbd>&lt;Leader&gt;</kbd> <kbd>m</kbd> for this:</p>
<div class="hll"><pre><span></span><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span> :<span class="p">!</span>python %<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span> :<span class="p">!</span><span class="k">make</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span> :<span class="p">!</span>npm run <span class="k">start</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</pre></div>
<h3 id="use-a-key-sequence-instead-of-escape">use a key sequence instead of escape</h3><p>Escape is a long way away from the home row:</p>
<div class="hll"><pre><span></span><span class="nb">inoremap</span> fd ^[
</pre></div>
<p><kbd>jj</kbd> is often used for this, I prefer <kbd>fd</kbd> because I tend to keep my left hand on the home row more than my right. The <code>^[</code> is inserted via <kbd>&lt;C-v&gt;</kbd><kbd>escape</kbd>.</p>
<h3 id="keep-the-cursor-centered-when-jumping-between-paragraphs">keep the cursor centered when jumping between paragraphs</h3><p><kbd>{</kbd> and <kbd>}</kbd> are great for hopping around blocks of code, with
these mappings the buffer stays centred on what you're looking at while doing
so.</p>
<div class="hll"><pre><span></span><span class="nb">nnoremap</span> { {zz
<span class="nb">nnoremap</span> } }zz
</pre></div>
<h2 id="utility">utility</h2><p>Useful tidbits I've created or collected.</p>
<h3 id="open-windows-explorer-with-the-current-file-highlighted">open windows explorer with the current file highlighted</h3><div class="hll"><pre><span></span><span class="k">function</span><span class="p">!</span> OpenExplorer<span class="p">()</span>
    <span class="k">let</span> <span class="nb">path</span> <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;%:p&#39;</span><span class="p">)</span>
    <span class="k">let</span> <span class="nb">path</span> <span class="p">=</span> substitute<span class="p">(</span><span class="nb">path</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="s2">&quot;\\&quot;</span><span class="p">,</span> <span class="s2">&quot;g&quot;</span><span class="p">)</span>
    execute <span class="s2">&quot;!start explorer /select,&quot;</span> . <span class="nb">path</span> . <span class="s2">&quot;\r&quot;</span>
<span class="k">endfunction</span>

<span class="k">if</span> has<span class="p">(</span><span class="s2">&quot;win32&quot;</span><span class="p">)</span>
    <span class="nb">nnoremap</span> <span class="p">&lt;</span>F11<span class="p">&gt;</span> :<span class="k">call</span> OpenExplorer<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
<span class="k">endif</span>
</pre></div>
<p>This was surprisingly tricky. It took much longer than it should have to
discover I needed to add a trailing carriage return to the path for this to
work.</p>
<h3 id="send-a-command-to-a-terminal-in-another-buffer-neovim-only">send a command to a terminal in another buffer (neovim only)</h3><p>In the terminal buffer, run this to find the job id of the terminal:</p>
<div class="hll"><pre><span></span><span class="p">:</span>echo <span class="k">b</span>:terminal_job_id
</pre></div>
<p>Then in any buffer, run this to send text to it:</p>
<div class="hll"><pre><span></span><span class="p">:</span><span class="k">call</span> jobsend<span class="p">(&lt;</span>job id<span class="p">&gt;,</span> <span class="s2">&quot;text&quot;</span><span class="p">)</span>
</pre></div>
<p>Useful when combined with an ad-hoc mapping:</p>
<div class="hll"><pre><span></span><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">m</span> :<span class="k">call</span> jobsend<span class="p">(&lt;</span>job id<span class="p">&gt;,</span> <span class="s2">&quot;python main.py&quot;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</pre></div>
<h3 id="run-a-command-without-changing-your-view">run a command without changing your view</h3><p>A very simple but useful function inspired by emacs'
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Excursions.html">excursions</a>:</p>
<div class="hll"><pre><span></span><span class="k">function</span><span class="p">!</span> ExcursionExec<span class="p">(</span>cmd<span class="p">)</span>
    <span class="k">let</span> <span class="k">l</span>:winview <span class="p">=</span> winsaveview<span class="p">()</span>
    execute <span class="k">a</span>:cmd
    <span class="k">call</span> winrestview<span class="p">(</span><span class="k">l</span>:winview<span class="p">)</span>
<span class="k">endfunction</span>
</pre></div>
<p>For example, I use this in a mapping that copies the current file to the system clipboard:</p>
<div class="hll"><pre><span></span><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span>yf :<span class="k">call</span> ExcursionExec<span class="p">(</span><span class="s1">&#39;normal gg&quot;+yG&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</pre></div>
<h3 id="format-json">format JSON</h3><p>Format JSON using node:</p>
<div class="hll"><pre><span></span>command<span class="p">!</span> FormatJson %<span class="p">!</span>node <span class="p">-</span><span class="k">e</span> <span class="s2">&quot;var fs = require(&#39;fs&#39;); console.log(JSON.stringify(JSON.parse(fs.readFileSync(process.stdin.fd, &#39;utf-8&#39;)), null, 2));&quot;</span>
</pre></div>
<h3 id="keep-the-buffers-equal-in-diff-mode">keep the buffers equal in diff mode</h3><p>Make vim behave like other diff tools:</p>
<div class="hll"><pre><span></span><span class="k">if</span> &amp;<span class="nb">diff</span>
    <span class="k">set</span> <span class="nb">equalalways</span>
    <span class="k">au</span> <span class="nb">VimResized</span> * <span class="k">wincmd</span> <span class="p">=</span>
<span class="k">endif</span>
</pre></div>
<h3 id="turn-off-search-highlighting-when-you-move">turn off search highlighting when you move</h3><p>No more <code>:nohlsearch</code></p>
<div class="hll"><pre><span></span><span class="nb">noremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>StopHL<span class="p">)</span> execute<span class="p">(</span><span class="s1">&#39;nohlsearch&#39;</span><span class="p">)</span>
<span class="nb">noremap</span><span class="p">!</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>StopHL<span class="p">)</span> execute<span class="p">(</span><span class="s1">&#39;nohlsearch&#39;</span><span class="p">)</span>

<span class="k">function</span><span class="p">!</span> StopHL<span class="p">()</span>
  <span class="k">if</span> <span class="p">!</span><span class="k">v</span>:<span class="nb">hlsearch</span> <span class="p">||</span> <span class="k">mode</span><span class="p">()</span> isnot <span class="s1">&#39;n&#39;</span>
    <span class="k">return</span>
  <span class="k">else</span>
    <span class="k">sil</span> <span class="k">call</span> feedkeys<span class="p">(</span><span class="s2">&quot;\&lt;Plug&gt;(StopHL)&quot;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">)</span>
  <span class="k">endif</span>
<span class="k">endfunction</span>

augroup SearchHighlight
  <span class="k">au</span><span class="p">!</span>
  <span class="k">au</span> <span class="nb">CursorMoved</span> * <span class="k">call</span> StopHL<span class="p">()</span>
  <span class="k">au</span> <span class="nb">InsertEnter</span> * <span class="k">call</span> StopHL<span class="p">()</span>
augroup <span class="k">end</span>
</pre></div>
<p>There are plugins to do this, but this turns out to be all I need. This
is taken from <a href="https://github.com/neovim/neovim/issues/5581">this GitHub issue</a>.
You can follow the thread there to understand how and why this works, and why
all of it is necessary.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>fixing ls colours</title>
    <link href="https://alligatr.co.uk/blog/ls-colours/" />
    <id>https://alligatr.co.uk/blog/ls-colours/</id>
    <updated>2020-01-05T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>A PSA for anyone who runs <code>ls</code> and is greeted with this legibility nightmare:</p>
<p><img src="ls-colours/green-ls.png" alt=""></p>
<p>According to dircolors, the green background represents a directory that is other-writable:</p>
<pre><code>$ dircolors -p | grep ";42"
STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writable (+t,o+w)
OTHER_WRITABLE 35;42 # dir that is other-writable (o+w) and not sticky
</code></pre>
<p>42, as part of an ANSI escape sequence, gives you a green background.</p>
<p>Luckily it's easy to change by appending some commands to the end of the <code>LS_COLORS</code> environment variable. Here's how I'm doing that in my bashrc:</p>
<pre><code>export LS_COLORS="${LS_COLORS}tw=01;34:ow=01;34:
</code></pre>
<p>This sets the tw (STICKY_OTHER_WRITABLE) and ow (OTHER_WRITABLE) colors to the same as a regular directory; blue foreground with no background.</p>
<p>Also if you're curious, I tracked down <a href="https://lists.gnu.org/archive/html/bug-coreutils/2005-09/msg00023.html">the patch where those colours were introduced</a>.</p>

      ]]>
    </content>
  </entry>
  
  <entry>
    <title>a disorganised collection of thoughts about vue</title>
    <link href="https://alligatr.co.uk/blog/a-disorganised-collection-of-thoughts-about-vue/" />
    <id>https://alligatr.co.uk/blog/a-disorganised-collection-of-thoughts-about-vue/</id>
    <updated>2019-11-23T00:00:00Z</updated>
    <content type="html">
      <![CDATA[
      <p>I'm trying to learn vue, by rewriting a react application in it. Here are some disorganised thoughts.</p>
<p>At first I thought it felt a bit more prescriptive than React, but on reflection that's not quite it. The surface area of the vue API seems quite large, so I don't think it's trying to force you to do things in a particular way. What it actually is, is that it feels more <em>magic</em> than React.</p>
<p>JSX is actually fairly simple, rendering a component just compiles down to a function call. As a result of that, you can use regular JavaScript constructs. Want to loop over an array and render a component for each? Use map. Want to conditionally render something? Use a ternary. Those are <em>actual</em> loops and <em>actual</em> ternaries.</p>
<p>Vue on the other hand, uses a set of custom attributes in the template to achieve the same thing. <code>v-for</code>, <code>v-if</code> and so on. The level of abstraction is useful for reducing boilerplate (think about the number of times you've had to write <code>{condtion &amp;&amp; (stuff to render)}</code>) but comes at the cost of simplicity. What if my use case is weird and doesn't quite fit in with the set of attributes vue provides? I don't know if that will happen, but I <em>feel</em> like it's going to happen sooner or later, and then I don't know what the recourse is.</p>
<hr>
<p><strong>Update</strong> turns out <a href="https://vuejs.org/v2/guide/render-function.html">vue supports render functions</a>, for when you need to go hog wild, so I guess that would be the recourse.</p>
<hr>
<p>Having said that, it quite often feels quite react-y and I imagine some of the same ideas and pattern will come into play. Components can be stateless or stateful, and they compose in similar ways. Of course this metaphor all breaks down when data binding enters the picture. I've had a fairly negative experience with data binding in the past (backbone, ugh, <em>knockout</em> double ugh) and I haven't used vue enough to say if it'll be any more positive.</p>
<p>Actually, the very small amount of knockout I've used reminds me of vue in some ways. Custom attributes that express how certain things on an element should be bound to properties. Hmm.</p>
<h2 id="performance">Performance</h2><p>React is fast in the simple case. It's not hard to write <em>terribly</em> performing react code though. Keeping things performing well requires a little bit of careful thought.</p>
<p>Vue, via it's explicit binding, knows all of the things that might cause a component to re-render, so it can basically implement a smart <code>shouldComponentUpdate</code> for every component. That should make it generally faster in a large application, but I'm just theorising here.</p>
<h2 id="composition">Composition</h2><p>We've all gotten (somewhat) used to the idea of presentational and container components in react as a Good Thing, even if we don't always actually follow the pattern. You can implement the same pattern in vue too, it has pure functional components, which enforce them being dumb presentation only components.</p>
<p>The higher level patterns that exist in react for composition (compound components, render props, children as a function and so on) are more react-specific, but vue does have a concept similar to props.children in react called slots. I think you'd be able to implement compound components in quite similar way to react in vue.</p>
<p>OK, actually the <a href="https://vuejs.org/v2/guide/components-slots.html#Named-Slots">named slots</a> look really interesting. That solves a bunch of the problems the patterns I mentioned before are aiming to solve. It's a bit odd, since the child component is still responsible for the <em>order</em> the slots are rendered in, which isn't the case with a compound component, but it's still a bit nicer than having to pass components in props.</p>
<h2 id="styling">Styling</h2><p>React doesn't care how you style things. That means you end up with inline styles, styled components, style objects and more. Vue (seemingly) has one way to apply styles.</p>
<p>In vue you use style tags, that look a lot like CSS modules. They can be scoped to a particular component or applied globally and live alongside the component. This pattern is actually very close to what I've settled on as my preferred way of styling react components, which is interesting. I've settled on CSS modules and keeping all of the styles with the component, using class names to handle styling changes based on props.</p>

      ]]>
    </content>
  </entry>
  

</feed>
